/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TextboxControl.java
 *
 * Created on 4-sep-2012, 7:48:22
 */
package tudelft.nas.graphgear.demointerface;

import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

/**
 *
 * @author Ruud
 */
public class TextboxControl extends javax.swing.JPanel {
    boolean numbersOnly = true;
    double value = 0.0d;
    /** Creates new form TextboxControl */
    public TextboxControl() {
        initComponents();
        addFocusListener();
    }
    /**
     * Creates a new textbox control. A textbox control can be set to accept numbers only,
     * in that case the control will only be valid with a number in it.
     * @param name name of the control
     * @param caption caption of the control
     * @param _numbersOnly true if only numbers can be entered
     */
    public TextboxControl(String name, String caption, boolean _numbersOnly){
        this();
        this.setName(name);
        Caption.setText(caption);
        numbersOnly = _numbersOnly;
    }
    
    private void addFocusListener(){
        Value.addFocusListener(new FocusListener(){

            @Override
            public void focusGained(FocusEvent e) {
                Value.setBackground(Color.green);
            }

            @Override
            public void focusLost(FocusEvent e) {
                Value.setBackground(Color.white);
                Value.setText(Double.toString(value));
            }
        
        });
    }
    
    /**
     * Fires a property change to notify listeners that the value is 
     * changed. Also transfers the foces of the textbox to the underlying
     * JPanel to get rid of the cursor there.
     * @param value double representation of the value currently in the 
     * textbox.
     */
    private void valueUpdated(double _value){
        value = _value;
        this.firePropertyChange("textboxcontrolvaluechanged", -1d, value);
        this.requestFocus();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Value = new javax.swing.JTextField();
        Caption = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMaximumSize(new java.awt.Dimension(75, 50));
        setMinimumSize(new java.awt.Dimension(75, 50));

        Value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Value.setText("0.0");
        Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ValueKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ValueKeyTyped(evt);
            }
        });

        Caption.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Caption.setText("Caption");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Caption, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
            .addComponent(Value, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(Caption, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
    }// </editor-fold>//GEN-END:initComponents

private void ValueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ValueKeyTyped
    
    if(!numbersOnly)
        return;
    String allowedCharacters = "0123456789";
    
    if(allowedCharacters.indexOf(evt.getKeyChar()) == -1)
    {
        if(".,".indexOf(evt.getKeyChar()) != -1 && Value.getText().indexOf(".") == -1)
        {
            evt.setKeyChar('.');
        }
        else
        {
            evt.consume();
        }
    }
}//GEN-LAST:event_ValueKeyTyped

private void ValueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ValueKeyReleased

    if(evt.getKeyCode() == 10)
    {
        double d;
        try
        {
            d = Double.parseDouble(Value.getText());
            valueUpdated(d);
        }
        catch(Exception e)
        {
            
        }
    }
}//GEN-LAST:event_ValueKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Caption;
    public javax.swing.JTextField Value;
    // End of variables declaration//GEN-END:variables
}
