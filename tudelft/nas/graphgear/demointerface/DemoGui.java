/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tudelft.nas.graphgear.demointerface;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/*
 * DemoGui.java
 *
 * Created on 28-jun-2012, 18:08:13
 */
/**
 *
 * @author Ruud
 */
public class DemoGui extends javax.swing.JFrame {

    /** Creates new form DemoGui */
    public DemoGui() {
        initComponents();
        addNodeSizeControl();
        SizeButton.setVisible(false);
        SidePanelElementContainer.setLayout(new BoxLayout(SidePanelElementContainer,BoxLayout.Y_AXIS));
    }
    
    /**
     * Creates a new demo gui with nodes at the given coordinates
     * @param x x-coordinates of the nodes
     * @param y y-coordinates of the nodes
     */
    public DemoGui(double[] x, double[] y){
        this();
        ArrayList<drawNode> nodes = new ArrayList<>();
        for(int i=0;i<x.length;i++)
        {
            nodes.add(new drawNode(x[i],y[i],10d,i,""));
        }
        gp = new graphPanel(nodes,new ArrayList<drawLink>());
        gp.setSize(GraphPanel.getSize());
        GraphPanel.add(gp); 
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    /**
     * Creates a new demo gui from a svg file
     * @param svgLocation 
     */
    public DemoGui(String svgLocation){
        this();
        customInit(svgLocation);
    }
    
    
    /**
     * Adds a control panel to control the size of the nodes
     */
    public void addNodeSizeControl(){
        SliderControl ns = new SliderControl("Node Size",1,500);
        ns.Slider.setValue(130);
        ns.Slider.addChangeListener(new ChangeListener(){

            @Override
            public void stateChanged(ChangeEvent e) {
                if(null != gp)
                {
                    gp.setNodeScaling((double)((JSlider)e.getSource()).getValue()/100d);
                    System.out.println(((JSlider)e.getSource()).getValue());
                }
            }
        });
        ControlPanel.add(ns);
    }
    
    /**
     * Adds an info panel to the top of the screen
     * @param p the info panel
     */
    public void addInfoPanel(JPanel p ){
        InfoPanel.add(p);
    }
    
    /**
     * Adds a control panel to the bottom part of the screen
     * @param p control panel
     */
    public void addControlPanel(JPanel p){
        ControlPanel.add(p);
        this.repaint();
    }
    
    /**
     * Custom is use to read a graph layout
     * @param file graph layout
     */
    public void customInit(String file){
        GraphReader G = new GraphReader(file);
        gp = new graphPanel(G.getNodes(),G.getLinks());
        gp.setSize(GraphPanel.getSize());
        GraphPanel.add(gp); 
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    /**
     * Adds a panel to the right hand side of the screen
     * @param sp 
     */
    public void addSidePanel(JPanel sp){
        SidePanelElementContainer.add(sp);
    }
    
    /**
     * Opens or closes the right hand side panel
     */
    public void toggleSidePanelSize(){
        Dimension d = SidePanel.getSize();
        if(d.getWidth() > 25)
        {
            d.width = 25;
            d.height = 50;
            // make all sidepanel elements invisible
            for(Component c: SidePanel.getComponents())
            {
                if(!(c instanceof JButton))
                {
                    c.setVisible(false);
                }
            }
        }
        else
        {
            // make all sidepanel elements visible again
            for(Component c: SidePanel.getComponents())
            {
                c.setVisible(true);
            }
            d.width = 300;
            d.height = GraphPanel.getHeight() + ControlPanel.getHeight();
        }
        SidePanel.setPreferredSize(d);
        SidePanel.setSize(d);
        this.validate();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSlider1 = new javax.swing.JSlider();
        GraphPanel = new javax.swing.JPanel();
        ControlPanel = new javax.swing.JPanel();
        InfoPanel = new javax.swing.JPanel();
        SidePanel = new javax.swing.JPanel();
        SizeButton = new javax.swing.JButton();
        SidePanelElementContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GraphPanel.setName("GraphParentPanel"); // NOI18N
        GraphPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                resized(evt);
            }
        });

        javax.swing.GroupLayout GraphPanelLayout = new javax.swing.GroupLayout(GraphPanel);
        GraphPanel.setLayout(GraphPanelLayout);
        GraphPanelLayout.setHorizontalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );
        GraphPanelLayout.setVerticalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        ControlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ControlPanel.setAutoscrolls(true);
        ControlPanel.setPreferredSize(new java.awt.Dimension(380, 50));
        ControlPanel.setLayout(new javax.swing.BoxLayout(ControlPanel, javax.swing.BoxLayout.LINE_AXIS));

        InfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        InfoPanel.setName("InfoPanel"); // NOI18N
        InfoPanel.setPreferredSize(new java.awt.Dimension(380, 30));
        InfoPanel.setLayout(new javax.swing.BoxLayout(InfoPanel, javax.swing.BoxLayout.LINE_AXIS));

        SidePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SidePanel.setPreferredSize(new java.awt.Dimension(300, 346));

        SizeButton.setText(">>");
        SizeButton.setMaximumSize(new java.awt.Dimension(50, 25));
        SizeButton.setMinimumSize(new java.awt.Dimension(50, 25));
        SizeButton.setPreferredSize(new java.awt.Dimension(50, 25));
        SizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SizeButtonActionPerformed(evt);
            }
        });

        SidePanelElementContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SidePanelElementContainer.setPreferredSize(new java.awt.Dimension(296, 152));
        SidePanelElementContainer.setLayout(new javax.swing.BoxLayout(SidePanelElementContainer, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout SidePanelLayout = new javax.swing.GroupLayout(SidePanel);
        SidePanel.setLayout(SidePanelLayout);
        SidePanelLayout.setHorizontalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addComponent(SizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(SidePanelElementContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        SidePanelLayout.setVerticalGroup(
            SidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SidePanelLayout.createSequentialGroup()
                .addComponent(SizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SidePanelElementContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ControlPanel, 0, 0, Short.MAX_VALUE)
                    .addComponent(InfoPanel, 0, 0, Short.MAX_VALUE)
                    .addComponent(GraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SidePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GraphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7)
                        .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void resized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_resized
    if (evt.getComponent().getName().equals("GraphParentPanel"))
    {
        JPanel p = (JPanel)evt.getComponent();
        if(p.getComponentCount()> 0)
        {
            p.getComponent(0).setSize(p.getSize());
        }
    }
}//GEN-LAST:event_resized

private void SizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SizeButtonActionPerformed
    toggleSidePanelSize();
}//GEN-LAST:event_SizeButtonActionPerformed

    public graphPanel gp;
    private BufferedImage im;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel ControlPanel;
    private javax.swing.JPanel GraphPanel;
    public javax.swing.JPanel InfoPanel;
    public javax.swing.JPanel SidePanel;
    public javax.swing.JPanel SidePanelElementContainer;
    private javax.swing.JButton SizeButton;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
